// source: src/app/proto/college.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.AllProfessorsResonse', null, global);
goog.exportSymbol('proto.GetProfessorRequest', null, global);
goog.exportSymbol('proto.GetProfessorResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetProfessorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetProfessorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetProfessorRequest.displayName = 'proto.GetProfessorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetProfessorResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetProfessorResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetProfessorResponse.displayName = 'proto.GetProfessorResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AllProfessorsResonse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AllProfessorsResonse.repeatedFields_, null);
};
goog.inherits(proto.AllProfessorsResonse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AllProfessorsResonse.displayName = 'proto.AllProfessorsResonse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetProfessorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetProfessorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetProfessorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetProfessorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    professorid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetProfessorRequest}
 */
proto.GetProfessorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetProfessorRequest;
  return proto.GetProfessorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetProfessorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetProfessorRequest}
 */
proto.GetProfessorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfessorid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetProfessorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetProfessorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetProfessorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetProfessorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfessorid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string professorId = 1;
 * @return {string}
 */
proto.GetProfessorRequest.prototype.getProfessorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetProfessorRequest} returns this
 */
proto.GetProfessorRequest.prototype.setProfessorid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetProfessorResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.GetProfessorResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetProfessorResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetProfessorResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    professorid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    doj: (f = msg.getDoj()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    teaches: jspb.Message.getFieldWithDefault(msg, 4, ""),
    salary: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    isphd: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    pictureurl: jspb.Message.getFieldWithDefault(msg, 7, ""),
    rating: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetProfessorResponse}
 */
proto.GetProfessorResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetProfessorResponse;
  return proto.GetProfessorResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetProfessorResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetProfessorResponse}
 */
proto.GetProfessorResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProfessorid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDoj(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTeaches(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSalary(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsphd(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setPictureurl(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRating(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetProfessorResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetProfessorResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetProfessorResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetProfessorResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfessorid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDoj();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getTeaches();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getSalary();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getIsphd();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getPictureurl();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getRating();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
};


/**
 * optional string professorId = 1;
 * @return {string}
 */
proto.GetProfessorResponse.prototype.getProfessorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetProfessorResponse} returns this
 */
proto.GetProfessorResponse.prototype.setProfessorid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.GetProfessorResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetProfessorResponse} returns this
 */
proto.GetProfessorResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp doj = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.GetProfessorResponse.prototype.getDoj = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.GetProfessorResponse} returns this
*/
proto.GetProfessorResponse.prototype.setDoj = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.GetProfessorResponse} returns this
 */
proto.GetProfessorResponse.prototype.clearDoj = function() {
  return this.setDoj(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.GetProfessorResponse.prototype.hasDoj = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string teaches = 4;
 * @return {string}
 */
proto.GetProfessorResponse.prototype.getTeaches = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetProfessorResponse} returns this
 */
proto.GetProfessorResponse.prototype.setTeaches = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double salary = 5;
 * @return {number}
 */
proto.GetProfessorResponse.prototype.getSalary = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GetProfessorResponse} returns this
 */
proto.GetProfessorResponse.prototype.setSalary = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional bool isPhd = 6;
 * @return {boolean}
 */
proto.GetProfessorResponse.prototype.getIsphd = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.GetProfessorResponse} returns this
 */
proto.GetProfessorResponse.prototype.setIsphd = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional string pictureUrl = 7;
 * @return {string}
 */
proto.GetProfessorResponse.prototype.getPictureurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetProfessorResponse} returns this
 */
proto.GetProfessorResponse.prototype.setPictureurl = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional double rating = 8;
 * @return {number}
 */
proto.GetProfessorResponse.prototype.getRating = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.GetProfessorResponse} returns this
 */
proto.GetProfessorResponse.prototype.setRating = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AllProfessorsResonse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AllProfessorsResonse.prototype.toObject = function(opt_includeInstance) {
  return proto.AllProfessorsResonse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AllProfessorsResonse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AllProfessorsResonse.toObject = function(includeInstance, msg) {
  var f, obj = {
    professorsList: jspb.Message.toObjectList(msg.getProfessorsList(),
    proto.GetProfessorResponse.toObject, includeInstance),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    count: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AllProfessorsResonse}
 */
proto.AllProfessorsResonse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AllProfessorsResonse;
  return proto.AllProfessorsResonse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AllProfessorsResonse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AllProfessorsResonse}
 */
proto.AllProfessorsResonse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.GetProfessorResponse;
      reader.readMessage(value,proto.GetProfessorResponse.deserializeBinaryFromReader);
      msg.addProfessors(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AllProfessorsResonse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AllProfessorsResonse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AllProfessorsResonse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AllProfessorsResonse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfessorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.GetProfessorResponse.serializeBinaryToWriter
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated GetProfessorResponse professors = 1;
 * @return {!Array<!proto.GetProfessorResponse>}
 */
proto.AllProfessorsResonse.prototype.getProfessorsList = function() {
  return /** @type{!Array<!proto.GetProfessorResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.GetProfessorResponse, 1));
};


/**
 * @param {!Array<!proto.GetProfessorResponse>} value
 * @return {!proto.AllProfessorsResonse} returns this
*/
proto.AllProfessorsResonse.prototype.setProfessorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.GetProfessorResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.GetProfessorResponse}
 */
proto.AllProfessorsResonse.prototype.addProfessors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.GetProfessorResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AllProfessorsResonse} returns this
 */
proto.AllProfessorsResonse.prototype.clearProfessorsList = function() {
  return this.setProfessorsList([]);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.AllProfessorsResonse.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AllProfessorsResonse} returns this
 */
proto.AllProfessorsResonse.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 count = 3;
 * @return {number}
 */
proto.AllProfessorsResonse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AllProfessorsResonse} returns this
 */
proto.AllProfessorsResonse.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto);
