// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculationServiceClient is the client API for CalculationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculationServiceClient interface {
	//Unary API
	AddNumbers(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
}

type calculationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculationServiceClient(cc grpc.ClientConnInterface) CalculationServiceClient {
	return &calculationServiceClient{cc}
}

func (c *calculationServiceClient) AddNumbers(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, "/calculationpb.CalculationService/AddNumbers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculationServiceServer is the server API for CalculationService service.
// All implementations must embed UnimplementedCalculationServiceServer
// for forward compatibility
type CalculationServiceServer interface {
	//Unary API
	AddNumbers(context.Context, *AddRequest) (*AddResponse, error)
	mustEmbedUnimplementedCalculationServiceServer()
}

// UnimplementedCalculationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculationServiceServer struct {
}

func (UnimplementedCalculationServiceServer) AddNumbers(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNumbers not implemented")
}
func (UnimplementedCalculationServiceServer) mustEmbedUnimplementedCalculationServiceServer() {}

// UnsafeCalculationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculationServiceServer will
// result in compilation errors.
type UnsafeCalculationServiceServer interface {
	mustEmbedUnimplementedCalculationServiceServer()
}

func RegisterCalculationServiceServer(s grpc.ServiceRegistrar, srv CalculationServiceServer) {
	s.RegisterService(&CalculationService_ServiceDesc, srv)
}

func _CalculationService_AddNumbers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculationServiceServer).AddNumbers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculationpb.CalculationService/AddNumbers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculationServiceServer).AddNumbers(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculationService_ServiceDesc is the grpc.ServiceDesc for CalculationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculationpb.CalculationService",
	HandlerType: (*CalculationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNumbers",
			Handler:    _CalculationService_AddNumbers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculations.proto",
}
